group_by(actor) %>%
count(sort = TRUE)
actors[50:] %>%
actors[50:]
group_by(actor) %>%
count(sort = TRUE)
actors[50,]
group_by(actor) %>%
count(sort = TRUE)
actors[1:50,]
act <- actors[1:1000,]
act %>%
filter(row)
act %>%
group_by(actor) %>%
count(sort = TRUE)
act
act %>%
group_by(actor) %>%
count(sort = TRUE)
rm(c(act, actors))
rm(act)
rm(actors)
components(movies_actors_graph, mode = "weak")
hist(degree(movies_actors_graph))
is.connected(movies_actors_graph, mode = "strong")
cds <- components(movies_actors_graph, mode = "strong")
plot(graf, vertex.color = cds$membership, edge.arrow.width = 0.01)
plot(movies_actors_graph, vertex.color = cds$membership, edge.arrow.width = 0.01)
plot(movies_actors_graph, vertex.color = cds$membership, edge.arrow.width = 0.01, vertex.label = NA)
is.connected(movies_actors_graph, mode = "weak")
mean(degree(movies_actors_graph))
mean(degree(movies_actors_graph, mode = "in"))
mean(degree(movies_actors_graph, mode = "out"))
mean(degree(movies_actors_graph, mode = "out"))
# Graph density
igraph::edge_density(movies_actors_graph)
# Graph diameter
diameter(movies_actors_graph)
average.path.length(movies_actors_graph)
strength(movies_actors_graph)
hist(strength(movies_actors_graph))
# Graph betweenness
betweenness(movies_actors_graph)
hist(betweenness(movies_actors_graph))
max(dg_all)
dg_all <- degree(movies_actors_graph)
dg_out <- degree(movies_actors_graph, mode = "out")
dg_out <- degree(movies_actors_graph, mode = "out")
dg_in <- degree(movies_actors_graph, mode = "in")
max(dg_all)
V(graf)$label[which(dg_all == max(dg_all))]
V(movies_actors_graph)$label[which(dg_all == max(dg_all))]
V(movies_actors_graph)$name[which(dg_all == max(dg_all))]
min(dg_in)
mean(degree(movies_actors_graph))
#Graph closeness
closeness(movies_actors_graph)
hist(closeness(movies_actors_graph))
# Graph eigen centrality
eigen_centrality(movies_actors_graph, directed = TRUE)
# Graph eigen centrality
eigen_centrality(movies_actors_graph)
hist(eigen_centrality(movies_actors_graph))
#Graph PageRank
page_rank(movies_actors_graph)
hist(page_rank(movies_actors_graph))
#Graph eccentricity
eccentricity(movies_actors_graph)
hist(eccentricity(movies_actors_graph))
V(movies_actors_graph)$name[order(dg_all, decreasing = TRUE)]
V(movies_actors_graph)$name[which(dg_out == min(dg_out))]
V(movies_actors_graph)$name[which(dg_all == min(dg_all))]
degree_distribution(movies_actors_graph)
sum(degree_distribution(movies_actors_graph))
barplot(degree_distribution(movies_actors_graph))
hist(strength(movies_actors_graph))
# Graph betweenness
betweenness(movies_actors_graph)
hist(strength(movies_actors_graph))
hist(degree(movies_actors_graph))
plot(movies_actors_graph, vertex.color = cds1$membership, edge.arrow.width = 0.01, vertex.label = NA)
cds1 <- components(movies_actors_graph, mode = "strong")
plot(movies_actors_graph, vertex.color = cds1$membership, edge.arrow.width = 0.01, vertex.label = NA)
# Graph betweenness
bw <- betweenness(movies_actors_graph)
max(bw)
plot(movies_actors_graph, vertex.size = betweenness(movies_actors_graph) * 0.05, edge.arrow.width = 0.01)
plot(movies_actors_graph, vertex.size = betweenness(movies_actors_graph) * 0.05, edge.arrow.width = 0.01, vertex.label = NA)
V(movies_actors_graph)$name[which(bw == max(bw))]
# Graph closeness
cl <- closeness(movies_actors_graph)
max(cl)
V(graf)$label[which(cl == max(cl))]
V(movies_actors_graph)$name[which(cl == max(cl))]
# Graph closeness
cl <- closeness(movies_actors_graph)
# Graph closeness
cl <- closeness(movies_actors_graph)
max(cl)
V(movies_actors_graph)$name[which(cl == max(cl))]
hist(closeness(movies_actors_graph))
ec1 <- eigen_centrality(movies_actors_graph)
ec1$vector
V(movies_actors_graph)$name[which(ec2$vector == max(ec2$vetor))]
ec2 <- eigen_centrality(movies_actors_graph, directed = TRUE)
V(movies_actors_graph)$name[which(ec1$vector == max(ec1$vetor))]
V(movies_actors_graph)$name[which(ec2$vector == max(ec2$vetor))]
max(ec2$vector)
V(movies_actors_graph)$name[which(ec1$vector == max(ec1$vetor))]
min(ec2$vector)
min(ec2$value)
max(ec2$value)
# Graph PageRank
pg <- page_rank(movies_actors_graph)
V(movies_actors_graph)$name[which(pg$vector == max(pg$vector))]
page_rank(movies_actors_graph)$vector %>%
order(., decreasing = TRUE) %>%
V(movies_actors_graph)$name[.]
min(pg$vector)
V(movies_actors_graph)$name[which(pg$vector == min(pg$vector))]
#Graph average path length
average.path.length(movies_actors_graph, directed = FALSE, unconnected = ~!is.connected(movies_actors_graph))
#Graph average path length
average.path.length(movies_actors_graph, directed = FALSE, unconnected = !is.connected(movies_actors_graph))
average.path.length(movies_actors_graph)
#Graph average path length
average.path.length(movies_actors_graph, directed = TRUE, unconnected = !is.connected(movies_actors_graph))
diameter(movies_actors_graph, directed = FALSE, unconnected = !is.connected(movies_actors_graph))
# Graph diameter
diameter(movies_actors_graph, directed = TRUE, unconnected = !is.connected(movies_actors_graph))
l <- cluster_louvain(movies_actors_graph)
l <- cluster_louvain(movies_actors_graph, directd=FALSE)
movies_actors_undirected_df <- read_csv("movies_actors_df.csv")
movies_actors_undirected_df <- read_csv("movies_actors_df.csv")
movies_actors_undirected_graph <- graph.data.frame(movies_actors_undirected_df, directed = FALSE)
write.graph(movies_actors_undirected_graph, "movies_actors_undirected_graph.graphml", format = "graphml")
l <- cluster_louvain(movies_actors_undirected_graph)
fg <- igraph::cluster_fast_greedy(movies_actors_graph)
fg <- igraph::cluster_fast_greedy(movies_actors_undirected_graph)
le <- cluster_leading_eigen(movies_actors_undirected_graph)
#le <- cluster_leading_eigen(movies_actors_undirected_graph)
eb <- cluster_edge_betweenness(movies_actors_undirected_graph)
eb
length(l) # number of communities
sort(sizes(l)) # sorted by increasing community sizes
round(modularity(l),6) # modularity rounded to 6 decimal places
for(number in 1:length(l)){
V(movies_actors_undirected_graph)[membership(l) == number]$label
}
movies_actors_undirected_graph$community <- l$membership # atrybut społeczności
V(movies_actors_undirected_graph)$color <- movies_actors_undirected_graph$community #różne kolory dla różnych społeczności
tkplot(movies_actors_undirected_graph)
movies_actors_undirected_graph$Modularity_Class <- l$membership
movies_actors_undirected_graph$Degree <- l$membership
comm1 <- induced_subgraph(movies_actors_undirected_graph, v = which(movies_actors_undirected_graph$community == 1)) #podgraf indukowany przez zbiór wierzchołków z 1. społeczności
tkplot(comm1)
## NMI
round(compare(l, fg, method = "nmi"),6) #obliczenie parametru NMI podzialow (porównanie)
plot_dendrogram(fg) #można narysować, bo algorytm jest hierarchiczny
length(fg) # number of communities
sort(sizes(fg)) # sorted by increasing community sizes
round(modularity(fg),6) # modularity rounded to 6 decimal places
membership(fg) # which vertex belongs to which community
communities(fg) # composition of individual communities
for(number in 1:length(fg)){
V(movies_actors_undirected_graph)[membership(fg) == number]$label
}
movies_actors_undirected_graph$community <- fg$membership # atrybut społeczności
V(movies_actors_undirected_graph)$color <- movies_actors_undirected_graph$community #różne kolory dla różnych społeczności
movies_actors_undirected_graph$Modularity_Class <- fg$membership
movies_actors_undirected_graph$Degree <- fg$membership
comm1 <- induced_subgraph(movies_actors_undirected_graph, v = which(movies_actors_undirected_graph$community == 1))
#induced subgraph by the set of vertices from community 1
tkplot(comm1)
styler:::style_active_file()
knitr::opts_chunk$set(echo = TRUE)
# Libraries and functions
library(tidyverse)
# Libraries and functions
library(tidyverse)
library(igraph)
# Reading movies_actors_graph
movies_actors_graph <- read.graph("movies_actors_graph.graphml", format = "graphml")
# Graph basic parameters
V(movies_actors_graph)
vcount(movies_actors_graph)
4079-250
ecount(movies_actors_graph)
# Graph degree
dg_all <- degree(movies_actors_graph)
summary(dg_all)
hist(dg_all)
dg_out <- degree(movies_actors_graph, mode = "out")
hist(dg_out)
dg_in <- degree(movies_actors_graph, mode = "in")
hist(dg_in)
hist(dg_out)
dg_in <- degree(movies_actors_graph, mode = "in") #
hist(dg_in)
table(dg_in)
V(movies_actors_graph)$name[which(dg_out == min(dg_out))]
mean(degree(movies_actors_graph))vcount(movies_actors_graph)
mean(degree(movies_actors_graph))
V(movies_actors_graph)$name[which(dg_all == max(dg_all))]
max(dg_all)
min(dg_all)
V(movies_actors_graph)$name[which(dg_all == min(dg_all))]
max(dg_in)
V(movies_actors_graph)$name[which(dg_in == max(dg_in))]
min(dg_in) #
V(movies_actors_graph)$name[which(dg_in == min(dg_in))]
hist(dg_in )
max(dg_out)
table(dg_out)
min(dg_out)
# Graph coherence
is.connected(movies_actors_graph, mode = "strong")
cds1 <- components(movies_actors_graph, mode = "strong")
plot(movies_actors_graph, vertex.color = cds1$membership, edge.arrow.width = 0.01, vertex.label = NA)
View(cds1)
summary(cds1)
is.connected(movies_actors_graph, mode = "weak")
cds2 <- components(movies_actors_graph, mode = "weak")
summary(cds2)
knitr::opts_chunk$set(echo = TRUE)
# Graph density
edge_density(movies_actors_graph)
# Libraries and functions
library(tidyverse)
# Libraries and functions
library(tidyverse)
library(igraph)
# Reading movies_actors_graph
movies_actors_graph <- read.graph("movies_actors_graph.graphml", format = "graphml")
# Graph density
edge_density(movies_actors_graph)
# Graph diameter
diameter(movies_actors_graph, directed = TRUE, unconnected = !is.connected(movies_actors_graph))
diameter(movies_actors_graph, directed = FALSE, unconnected = !is.connected(movies_actors_graph))
# Graph average path length
average.path.length(movies_actors_graph, directed = TRUE, unconnected = !is.connected(movies_actors_graph))
average.path.length(movies_actors_graph, directed = FALSE, unconnected = !is.connected(movies_actors_graph))
# Graph degree centrality
degree(movies_actors_graph)
# Graph degree centrality
degree(movies_actors_graph)
hist(degree(movies_actors_graph))
hist(degree(movies_actors_graph))
hist(degree(movies_actors_graph))
# Graph betweenness
bw <- betweenness(movies_actors_graph)
bw
max(bw)
mean(bw)
V(movies_actors_graph)$name[which(bw == max(bw))]
summary(bw)
# Graph betweenness
bw <- betweenness(movies_actors_graph, directed = FALSE) #
summary(bw)
V(movies_actors_graph)$name[which(bw == max(bw1))]
# Graph betweenness
bw1 <- betweenness(movies_actors_graph, directed = FALSE) #
# Graph betweenness
bw1 <- betweenness(movies_actors_graph, directed = FALSE) #
summary(bw1)
summary(bw1)
max(bw1)
V(movies_actors_graph)$name[which(bw == max(bw1))]
# Most movies and actors lacks distinctly defined intermediary nodes, possibly due to an even distribution of connections between movies and actors. However, there are certain nodes that might play a slightly more significant role in connecting or bridging specific groups of movies or actors in the network.
max(bw1)
plot(movies_actors_graph, vertex.size = betweenness(movies_actors_graph) * 0.05, edge.arrow.width = 0.01, vertex.label = NA)
plot(movies_actors_graph, vertex.size = betweenness(movies_actors_graph, directed = FALSE) * 0.05, edge.arrow.width = 0.01, vertex.label = NA)
bw <- betweenness(movies_actors_graph)
bw2 <- betweenness(movies_actors_graph)
summary(bw)
#
max(bw) #491269.2
# Graph closeness
cl <- closeness(movies_actors_graph)
# Graph closeness
cl <- closeness(movies_actors_graph)
max(cl)
V(movies_actors_graph)$name[which(cl == max(cl))]
summary(cl)
V(movies_actors_graph)$name[which(cl == 0,2)]
V(movies_actors_graph)$name[which(cl == 0.2)]
hist(closeness(movies_actors_graph))
movies_actors_undirected_df <- read_csv("movies_actors_df.csv")
movies_actors_undirected_df <- read_csv("movies_actors_df.csv")
movies_actors_undirected_graph <- graph.data.frame(movies_actors_undirected_df, directed = FALSE)
# Graph closeness
cl <- closeness(movies_actors_undirected_graph)
# Graph closeness
cl <- closeness(movies_actors_undirected_graph)
summary(cl)
hist(closeness(movies_actors_graph))
hist(closeness(movies_actors_undirected_graph))
# Graph eigen centrality
ec1 <- eigen_centrality(movies_actors_graph)
V(movies_actors_graph)$name[which(ec1$vector == max(ec1$vetor))]
ec2 <- eigen_centrality(movies_actors_graph, directed = TRUE)
V(movies_actors_graph)$name[which(ec2$vector == max(ec2$vetor))]
# Graph eigen centrality
ec1 <- eigen_centrality(movies_actors_graph)
V(movies_actors_graph)$name[which(ec1$vector == max(ec1$vetor))]
hist(ec1)
hist(ec1$vector)
summary(ec1$vector)
summary(ec2$vector)
hist(ec2$vector)
V(movies_actors_graph)$name[which(ec1$vector == 1)]
# Graph PageRank
pg <- page_rank(movies_actors_graph)
max(pg$vector)
V(movies_actors_graph)$name[which(pg$vector == max(pg$vector))]
# Graph PageRank
pg <- page_rank(movies_actors_graph, directed = FALSE)
max(pg$vector)
V(movies_actors_graph)$name[which(pg$vector == max(pg$vector))]
min(pg$vector)
V(movies_actors_graph)$name[which(pg$vector == min(pg$vector))]
V(movies_actors_graph)$name[which(pg1$vector == max(pg1$vector))]
# Graph PageRank
pg1 <- page_rank(movies_actors_graph, directed = FALSE)
max(pg1$vector)
V(movies_actors_graph)$name[which(pg1$vector == max(pg1$vector))]
V(movies_actors_graph)$name[which(pg1$vector == min(pg1$vector))]
max(pg2$vector)
pg2 <- page_rank(movies_actors_graph)
pg2 <- page_rank(movies_actors_graph)
max(pg1$vector)
pg2 <- page_rank(movies_actors_graph)
max(pg1$vector)
max(pg2$vector)
max(pg2$vector)
V(movies_actors_graph)$name[which(pg2$vector == max(pg2$vector))]
hist(pg1$vector)
V(movies_actors_graph)$name[which(pg2$vector == max(pg2$vector))]
# Robert de Niro highest chances of landing while traversing the graph
min(pg2$vector)
V(movies_actors_graph)$name[which(pg2$vector == min(pg2$vector))]
# Graph eccentricity
eccentricity(movies_actors_graph)
hist(eccentricity(movies_actors_graph))
# Graph eccentricity
ec <- eccentricity(movies_actors_graph)
)
# Graph eccentricity
ecc <- eccentricity(movies_actors_graph)
summary(ecc)
max(ecc)
V(movies_actors_graph)$name[which(ecc == max(ecc))] # Some movies, worth checking
V(movies_actors_graph)$name[which(ecc == max(ecc))] # Some actors
min(ecc)
V(movies_actors_graph)$name[which(ecc == min(ecc))] # Some actors, worth checking
knitr::opts_chunk$set(echo = TRUE)
# Libraries and functions
library(tidyverse)
library(igraph)
# Reading movies_actors_graph
movies_actors_graph <- read.graph("movies_actors_graph.graphml", format = "graphml")
# Reading movies_actors_graph
movies_actors_graph <- read.graph("movies_actors_graph.graphml", format = "graphml")
dg_in_without_0 <- dg_in[dg_in>0]
dg_in <- degree(movies_actors_graph, mode = "in") # 0 degree - all movies, mostly 1 and 2
dg_in_without_0 <- dg_in[dg_in>0]
dg_in_without_0
View(dg_in_without_0)
hist(dg_in_without_0)
dg_out_without_0 <- dg_in[dg_out>0]
dg_out_without_0 <- dg_out[dg_out>0]
dg_out <- degree(movies_actors_graph, mode = "out") # Distribution: almost all 1 and some 18
dg_out_without_0 <- dg_out[dg_out>0]
hist(dg_out_without_0)
mean(dg_in_without_0)
mean(dg_out_without_0)
library(igraph)
library(tidyverse)
movies_actors_graph <- read.graph("graphml\movies_actors_graph.graphml", format = "graphml")
library(igraph)
library(tidyverse)
movies_actors_graph <- read.graph("graphml/movies_actors_graph.graphml", format = "graphml")
movies_actors_undirected_df <- read_csv("movies_actors_df.csv")
library(igraph)
library(tidyverse)
movies_actors_graph <- read.graph("graphml/movies_actors_graph.graphml", format = "graphml")
movies_actors_undirected_df <- read_csv("exel/movies_actors_df.csv")
movies_actors_undirected_graph <- graph.data.frame(movies_actors_undirected_df, directed = FALSE)
dg_in <- degree(movies_actors_graph, mode = "in")
bw1 <- betweenness(movies_actors_graph, directed = FALSE)
cl <- closeness(movies_actors_undirected_graph)
ec1 <- eigen_centrality(movies_actors_graph)
pg1 <- page_rank(movies_actors_graph, directed = FALSE)
ecc <- eccentricity(movies_actors_undirected_graph)
l <- cluster_louvain(movies_actors_undirected_graph)
fg <- cluster_fast_greedy(movies_actors_undirected_graph)
knitr::opts_chunk$set(echo = TRUE)
vcount(movies_actors_graph) # 4079 vertexes(250 movies and 3829 actors)
# Libraries and functions
library(tidyverse)
library(igraph)
# Reading movies_actors_graph
movies_actors_graph <- read.graph("movies_actors_graph.graphml", format = "graphml")
# Reading movies_actors_graph
movies_actors_graph <- read.graph("movies_actors_graph.graphml", format = "graphml")
# Reading movies_actors_graph
movies_actors_graph <- read.graph("graphml/movies_actors_graph.graphml", format = "graphml")
# Reading movies_actors_graph
movies_actors_graph <- read.graph("graphml\movies_actors_graph.graphml", format = "graphml")
# Reading movies_actors_graph
movies_actors_graph <- read.graph("../graphml/movies_actors_graph.graphml", format = "graphml")
# Graph basic parameters
V(movies_actors_graph)
vcount(movies_actors_graph) # 4079 vertexes(250 movies and 3829 actors)
E(movies_actors_graph)
ecount(movies_actors_graph) # 4433 edges
# Graph degree
dg_all <- degree(movies_actors_graph) # Distribution: mostly 1(actors) and 18(because most movies got 18 actors added)
dg_out <- degree(movies_actors_graph, mode = "out") # Distribution: almost all 1 and some 18
dg_in <- degree(movies_actors_graph, mode = "in") # 0 degree - all movies, mostly 1 and 2
dg_in_1 <- dg_in[dg_in > 0]
mean(degree(movies_actors_graph))
# Around 2.17, mostly because a lot of actors play in one movie on the list of top 250 and movies have a lot of actors
max(dg_all) # 18
V(movies_actors_graph)$name[which(dg_all == max(dg_all))] # Most movies (240/250) have 18 actors
min(dg_all) # 1
V(movies_actors_graph)$name[which(dg_all == min(dg_all))] # Most actors play in one movie
max(dg_in) # 9
V(movies_actors_graph)$name[which(dg_in == max(dg_in))] # Robert De Niro played in the greatest number of movies on the list
min(dg_in) # 0
V(movies_actors_graph)$name[which(dg_in == min(dg_in))] # All movies are here with 0 degree
max(dg_out) # 18
V(movies_actors_graph)$name[which(dg_out == max(dg_out))] # Movies with a lot of actors
min(dg_out) # 0
V(movies_actors_graph)$name[which(dg_out == min(dg_out))] # All actors are here with 0 degree
# Graph coherence
is.connected(movies_actors_graph, mode = "strong")
# Not connected, because there are only edges out for movies vertexes, and edges in for actors vertexes
cds1 <- components(movies_actors_graph, mode = "strong")
is.connected(movies_actors_graph, mode = "weak")
# Not connected, because there are only edges out for movies vertexes, and edges in for actors vertexes
cds2 <- components(movies_actors_graph, mode = "weak")
plot(movies_actors_graph, vertex.color = cds1$membership, edge.arrow.width = 0.01, vertex.label = NA)
plot(movies_actors_graph, vertex.color = cds2$membership, edge.arrow.width = 0.01, vertex.label = NA)
# Graph density
edge_density(movies_actors_graph)
# A density of this magnitude suggests very few connections between movies and actors compared to all possible connections between them.
# This is related to fact that most actors are involved in a small number of movies from the list.
# Artistic Value and Quality: The Top 250 IMDb often includes movies of high artistic quality, where cast diversity might result from careful actor selection and their acting skills, contributing to the films' overall quality.
# International Character: Movies on this list may come from various countries and cultures, leading to actor diversity associated with different nationalities, languages, and acting styles.
# Directorial Creativity: The directors of these films might actively seek actor diversity, aiming to convey different perspectives and experiences through a variety of actors in their productions.
# Graph diameter
diameter(movies_actors_graph, directed = TRUE, unconnected = !is.connected(movies_actors_graph))
# The diameter is 1, because there is only one edge between two vertices (from movie to actor).
diameter(movies_actors_graph, directed = FALSE, unconnected = !is.connected(movies_actors_graph))
# A result of 20 could suggest that the longest path between the most distant vertices (movie-actor-movie-actor...)consists of 20 steps
# Graph average path length
average.path.length(movies_actors_graph, directed = TRUE, unconnected = !is.connected(movies_actors_graph))
# This suggests that in one of the connected components of the graph, the average distance between two vertices is 1 (from movie to actor).
average.path.length(movies_actors_graph, directed = FALSE, unconnected = !is.connected(movies_actors_graph))
# Such large average distances might arise due to various factors such as diverse movies, disjointed groups of movies or actors
plot_1 <- ggplot(data = as.data.frame(dg_in[dg_in > 0]), aes(x = dg_in[dg_in > 0])) +
geom_histogram(bins = 10, fill = "") +
scale_x_continuous(breaks = seq(from = 0 , to = 10, by = 1)) +
labs(x = "Liczba filmów w których aktor brał udział", y = "Liczba aktorów", title = "Rozkład liczby filmów w których aktorzy brali udział") +
theme_minimal()
plot_2 <- ggplot(data = as.data.frame(ecc), aes(x = ecc)) +
geom_histogram(bins = 10, fill = "red") +
scale_x_continuous(breaks = seq(from = 0 , to = 20, by = 2)) +
labs(x = "Liczba filmów w których aktor brał udział", y = "Liczba aktorów", title = "Rozkład liczby filmów w których aktorzy brali udział") +
theme_minimal()
hist(ecc, l)
vcount(movies_actors_graph) # 4079 vertexes(250 movies and 3829 actors)
ecount(movies_actors_graph) # 4433 edges
library(igraph)
library(tidyverse)
movies_actors_graph <- read.graph("graphml/movies_actors_graph.graphml", format = "graphml")
movies_actors_undirected_df <- read_csv("exel/movies_actors_df.csv")
movies_actors_undirected_graph <- graph.data.frame(movies_actors_undirected_df, directed = FALSE)
dg_in <- degree(movies_actors_graph, mode = "in")
bw1 <- betweenness(movies_actors_graph, directed = FALSE)
cl <- closeness(movies_actors_undirected_graph)
ec1 <- eigen_centrality(movies_actors_graph)
pg1 <- page_rank(movies_actors_graph, directed = FALSE)
ecc <- eccentricity(movies_actors_undirected_graph)
l <- cluster_louvain(movies_actors_undirected_graph)
fg <- cluster_fast_greedy(movies_actors_undirected_graph)
library(igraph)
library(tidyverse)
movies_actors_graph <- read.graph("graphml/movies_actors_graph.graphml", format = "graphml")
movies_actors_undirected_df <- read_csv("exel/movies_actors_df.csv")
movies_actors_undirected_graph <- graph.data.frame(movies_actors_undirected_df, directed = FALSE)
dg_in <- degree(movies_actors_graph, mode = "in")
bw1 <- betweenness(movies_actors_graph, directed = FALSE)
cl <- closeness(movies_actors_undirected_graph)
ec1 <- eigen_centrality(movies_actors_graph)
pg1 <- page_rank(movies_actors_graph, directed = FALSE)
ecc <- eccentricity(movies_actors_undirected_graph)
l <- cluster_louvain(movies_actors_undirected_graph)
fg <- cluster_fast_greedy(movies_actors_undirected_graph)
knitr::opts_chunk$set(echo = TRUE)
le <- cluster_leading_eigen(movies_actors_undirected_graph)
eb <- cluster_edge_betweenness(movies_actors_undirected_graph)
length(eb)
eb <- cluster_edge_betweenness(movies_actors_undirected_graph)
length(eb)
length(le)
round(modularity(eb), 6)
round(modularity(le), 6)
round(modularity(le), 6)
round(modularity(eb), 6)
